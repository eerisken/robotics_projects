# blackboard.py
import numpy as np
import os
import matplotlib
matplotlib.use('Agg') # Set the backend to 'Agg' for non-interactive plotting
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

# Import the new Map class
from map_data import Map

class Blackboard:
    """
    A simple blackboard class to share data between different behaviours.
    This acts as a central data store for the robot's state and environmental knowledge.
    """
    def __init__(self):
        # Define mapping parameters
        self.map_resolution = 0.05  # meters per grid cell (5 cm)
        self.map_origin_x = -3.0    # X-coordinate of the map's bottom-left corner in global meters
        self.map_origin_y = -3.8    # Y-coordinate of the map's bottom-left corner in global meters
        self.map_x_dim_meters = 5.6 # Total X dimension of the map in meters
        self.map_y_dim_meters = 6.4 # Total Y dimension of the map in meters
        self.output_dir = "map-outputs" # Standard output directory

        # Initialize the main Map object
        self.map = Map(
            map_origin_x=self.map_origin_x,
            map_origin_y=self.map_origin_y,
            map_resolution=self.map_resolution,
            map_dimension_x=self.map_x_dim_meters,
            map_dimension_y=self.map_y_dim_meters,
            output_directory=self.output_dir
        )
        
        # This will hold the C-Space Map object generated by CSpaceGenerator
        # It's initially None, set by MapEnvironment after C-space generation
        self.c_space_map_object = None 
    
        self.waypoints_to_follow = [  # List of [x, y] lists for navigation
            [0.65, 0.4],
            [0, 0.3],
            [-1.0, 0.35],
            [-1.3, 0.24],
            [-1.69, -0.28],
            [-1.69, -1.49],
            [-1.68, -2.9],
            [-1.68, -3.0],
            [-1.68, -3.1],
            [-1.0, -3.1],
            [0.0, -3.1],
            [0.43, -3.0],
            [0.44, -1.45],
            [0.44, -0.24],
            [0.44, -0.3],
            [-0.47, 0.60],
        ]  
        self.waypoints_to_follow = self.waypoints_to_follow + list(reversed(self.waypoints_to_follow))
        self.robot_pose = {'x': 0.0, 'y': -0.0, 'theta': 0.0265} # Current robot pose (GPS x, y, Compass orientation)
        self.map_exists = False  # Flag to indicate if a map has been loaded or created
        
        self.goal_lower_left = [-1.5, -3.3] # Approximate coordinates for the lower-left corner
        self.goal_sink = [0.44, -0.24]       # Approximate coordinates for the sink
        self.goal_table = [0.03, -0.47]
        
        self.mission_completed = False
        self.stuck_watchdog_enabled = True
        self.replan_needed = False
        self.current_goal = "goal_lower_left"

    def save_map(self):
        """
        Triggers saving of the original map and C-space map data and plots.
        This method is now primarily for convenience, as CSpaceGenerator will handle it.
        """
        # This method can be kept for backward compatibility or if you explicitly want to save
        # the original map separately from the C-space generation process.
        # However, the CSpaceGenerator.save_and_plot_maps() method is now the primary way
        # to save both maps and their plots.
        print("Blackboard: Delegating map saving/plotting to CSpaceGenerator (if used) or Map objects directly.")
        # Example: self.map.save_map_data("kitchen_map.npy")
        # Example: self.map.plot_map("final_occupancy_map.png")
        # If c_space_map_object exists:
        # self.c_space_map_object.save_map_data("kitchen_c_space.npy")
        # self.c_space_map_object.plot_map("final_c_space_map.png")


    def load_map(self):
        """
        Loads the map and c_space from disk if they exist using the Map objects.
        """
        map_loaded = self.map.load_map_data("kitchen_map.npy")
        
        # Attempt to load C-space into a temporary Map object first
        temp_c_space_map = Map(
            map_origin_x=self.map_origin_x,
            map_origin_y=self.map_origin_y,
            map_resolution=self.map_resolution,
            map_dimension_x=self.map_x_dim_meters,
            map_dimension_y=self.map_y_dim_meters,
            output_directory=self.output_dir
        )
        c_space_loaded = temp_c_space_map.load_map_data("kitchen_c_space.npy")

        if map_loaded and c_space_loaded:
            self.map_exists = True
            self.c_space_map_object = temp_c_space_map # Assign the loaded C-space map object
            print(f"Blackboard: Map and C-space loaded from disk.")
        else:
            self.map_exists = False
            self.c_space_map_object = None
            print(f"Blackboard: No existing map or C-space found.")
            
            
